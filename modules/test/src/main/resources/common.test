group: LiteralsTest
    case: Identifier
        python:
            simple_ident

        java:
            simple_ident;

        c++:
            simple_ident;


    case: FloatLiteral
        python:
            3.45

        java:
            3.45;

        c++:
            3.45;


    case: FloatLiteralWithF
        java:
            3.45f;

        c++:
            3.45f;

    case: FloatLiteralWithF
        java:
            3.45f;

        c++:
            3.45f;

    case: LongLiteral
        java:
            345L;

        c++:
            345L;


    case: NullLiteral
        python:
            None

        java:
            null;

        c++:
            nullptr;


    case: TrueLiteral
        python:
            True

        java:
            true;

        c++:
            true;


    case: FalseLiteral
        python:
            False

        java:
            false;

        c++:
            false;


    case: IntegerDecimalLiteral
        python:
            345

        java:
            345;

        c++:
            345;


    case: IntegerBinaryLiteral
        python:
            0b1010

        java:
            0b1010;

        c++:
            0b1010;


    case: IntegerHexLiteral
        python:
            0xABC

        java:
            0xABC;

        c++:
            0xABC;


    case: StringLiteral
        python:
            "abc"

        java:
            "abc";

        c++:
            "abc";

    case: StringLiteralWithEscape
        python:
            "abc \n\t \r"

        java:
            "abc \n\t \r";

        c++:
            "abc \n\t \r";

    case: StringRawLiteral
        main python:
            r"abc\t \n"

        java:
            "abc\\t \\n";

        c++:
            "abc\\t \\n";


    case: StringFormatLiteral
        main python:
            f"abc {abc} \t"

        java:
            String.format("abc %s \t", abc);

        c++:
            std::format("abc {} \t", abc);

    case: ListLiteral
        python:
            [1, 2, 4, a, b]

        java:
            new java.util.ArrayList<Object>(java.util.List.of(1, 2, 4, a, b));

    case: SetLiteral
        python:
            {1, 2, 3}

        java:
            new java.util.HashSet<Object>() {{add(1);add(2);add(3);}};

    case: TupleLiteral
        main python:
            (a, b, 10.3)

        java:
            new Object[] {a, b, 10.3};

        c++:
            {a, b, 10.3};


    case: DictLiteral
        main python:
            x = {"a": b, "x": y}

        java:
            x = new java.util.TreeMap<>() {{put("a", b);put("x", y);}};

        c++:
            x = {{"a", b}, {"x", y}};


group: SimpleExpressionsTest
    case: PlusOp
        python:
            a + 5

        java:
            a + 5;

        c++:
            a + 5;


    case: SubOp
        python:
            x - y

        java:
            x - y;

        c++:
            x - y;


    case: MulOp
        python:
            (x * y)

        java:
            (x * y);

        c++:
            (x * y);


    case: DivOp
        python:
            x / y

        java:
            x / y;

        c++:
            x / y;


    case: FloorDivOp
        python:
            x // y

        java:
            (long) (x / y);

        c++:
            (long) (x / y);


    case: IncrementOp
        python:
            x += 1

        java:
            x++;

        c++:
            x++;


    case: DecrementOp
        python:
            x -= 1

        java:
            x--;

        c++:
            x--;


    case: UnaryMinusOp
        python:
            -x

        java:
            -x;

        c++:
            -x;

    case: ContainsOp
        main python:
            x in list

        java:
            list.contains(x);

        c++:
            list.contains(x);

    case: ContainsNegativeOp
        main python:
            x not in list

        java:
            !list.contains(x);

        c++:
            !list.contains(x);

    case: ReferenceEqualOp
        main python:
            a is b

        java:
            a == b;

        c++:
            &a == &b;

    case: ReferenceNotEqualOp
        main python:
            a is not b

        java:
            a != b;

        c++:
            &a != &b;

    case: NotInstanceOf
        python:
            not isinstance(a, int)

        java:
            !(a instanceof Integer);

        c++:
            dynamic_cast<int>(a) == nullptr;

    case: InstanceOf
        python:
            isinstance(a, int)

        java:
            a instanceof Integer;

        c++:
            dynamic_cast<int>(a) != nullptr;

    case: UnaryPlusOp
        python:
            +x

        java:
            +x;

        c++:
            +x;


    case: ModOp
        python:
            x % y

        java:
            x % y;

        c++:
            x % y;


    case: PowOp
        python:
            x ** y

        java:
            Math.pow(x, y);

        c++:
            pow(x, y);


    case: AndOp
        python:
            (x and y)

        java:
            (x && y);

        c++:
            (x && y);


    case: OrOp
        python:
            x or y

        java:
            x || y;

        c++:
            x || y;


    case: BitwiseAndOp
        python:
            (x & y)

        java:
            (x & y);

        c++:
            (x & y);


    case: BitwiseOrOp
        python:
            x | y

        java:
            x | y;

        c++:
            x | y;


    case: BitwiseNotOp
        python:
            ~x

        java:
            ~x;

        c++:
            ~x;


    case: BitwiseXorOp
        python:
            x ^ y

        java:
            x ^ y;

        c++:
            x ^ y;


    case: NotOp
        python:
            not x

        java:
            !x;

        c++:
            !x;


    case: BitwiseLeftShiftOp
        python:
            x << y

        java:
            x << y;

        c++:
            x << y;


    case: BitwiseRightShiftOp
        python:
            x >> y

        java:
            x >> y;

        c++:
            x >> y;


    case: TernaryOp
        python:
            x if a else y

        java:
            a ? x : y;

        c++:
            a ? x : y;


    case: AssignmentExpr
        python:
            (x := b) + 3
        
        java:
            (x = b) + 3;

        c++:
            (x = b) + 3;


    case: MemberAccess
        python:
            x.a.b.c

        java:
            x.a.b.c;

        —Å++:
            x.a.b.c;


    case: FunctionCallWithoutArguments
        python:
            hello()

        java:
            hello();

        c++:
            hello();


    case: FunctionCallWithArguments
        python:
            hello(a, b, 10.3, "abc")

        java:
            hello(a, b, 10.3, "abc");

        c++:
            hello(a, b, 10.3, "abc");


    case: Indexing
        python:
            x[10]

        c++:
            x[10];

        java:
            x[10];


    case: ManyIndexes
        python:
            x[10][y]

        c++:
            x[10][y];

        java:
            x[10][y];

    case: DifferentPriorityOperators
        main python:
            x & y == z

        java:
            (x & y) == z;

    case: DifferentPriorityOperators
        main c++:
            t = x & y == z;

        python:
            t = x & (y == z)

group: ComparisonsTest
    case: LessOp
        python:
            (a < b)

        java:
            (a < b);

        c++:
            (a < b);


    case: LessEqualOp
        python:
            a <= b

        java:
            a <= b;

        c++:
            a <= b;


    case: GreaterEqualOp
        python:
            a >= b

        java:
            a >= b;

        c++:
            a >= b;


    case: GreaterOp
        python:
            a > b

        java:
            a > b;

        c++:
            a > b;


    case: EqOp
        python:
            a == b

        java:
            a == b;

        c++:
            a == b;


    case: NotEqOp
        python:
            a != b

        java:
            a != b;

        c++:
            a != b;


    case: CompoundComparisonConvertationBetweenLanguages
        python:
            (a < b < c and k <= m)

        java:
            (a < b && b < c && k <= m);

        c++:
            (a < b && b < c && k <= m);


group: SimpleStatements
    case: VariableDeclaration
        python:
            a: int = 456

        java:
            int a = 456;

        c++:
            int a = 456;


    case: MultipleVariableDeclarationWithUnknownType
        python:
            a, b, c = 40, t, "Hello"

        java:
            Object a = 40, b = t, c = "Hello";

        c++:
            auto a = 40, b = t, c = "Hello";

    case: AugmentedAssignmentStmt
        python:
            a: int = 456
            a = 3
            a += 3
            a -= 3
            a *= b
            a >>= b
            a <<= b
            a /= 5
            a /= 6
            a %= t
            a &= b
            c |= t
            v ^= m

        java:
            int a = 456;
            a = 3;
            a += 3;
            a -= 3;
            a *= b;
            a >>= b;
            a <<= b;
            a /= 5;
            a /= 6;
            a %= t;
            a &= b;
            c |= t;
            v ^= m;

        c++:
            int a = 456;
            a = 3;
            a += 3;
            a -= 3;
            a *= b;
            a >>= b;
            a <<= b;
            a /= 5;
            a /= 6;
            a %= t;
            a &= b;
            c |= t;
            v ^= m;


    case: AssignmentStmt
        python:
            a: int = 456
            a = 3

        java:
            int a = 456;
            a = 3;

        c++:
            int a = 456;
            a = 3;

    case: ArrayDeclaration
        c++:
            int x[] = {1, 2, 3, 4, a};

        java:
            int[] x = new int[] {1, 2, 3, 4, a};

    case: ListDeclaration
        c++:
            std::vector<int> a = {1, 2, 3};

        java:
            java.util.ArrayList<Integer> a = new java.util.ArrayList<>(java.util.List.of(1, 2, 3));

        python:
            a: list[int] = [1, 2, 3]

    case: MultidimensionalArrayDeclaration
        main c++:
            int a[][20][] = new int[30][30][10];

        java:
            int[][][] a = new int[30][30][10];

    case: ConstDeclaration
        main c++:
            const float PI = 3.14f;

        python:
            PI: float = 3.14

        java:
            final float PI = 3.14f;

    case: PassStatement
        python:
            if a:
                pass

        java:
            if (a) {
            }

        c++:
            if (a) {
            }
    # TODO: –ü—Ä–æ–¥—É–º–∞—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ


    case: MultipleAssignment
        main python:
            a, b = 3, 45

        java:
            a = 3;
            b = 45;

        c++:
            a = 3;
            b = 45;


group: Conditions
    case: IfElseCompound
        python:
            if a > 0:
                a += 1
                k = x + 1

        java:
            if (a > 0) {
                a++;
                k = x + 1;
            }

        c++:
            if (a > 0) {
                a++;
                k = x + 1;
            }


    case: OnlyIf
        python:
            if a >= 0:
                t()
                x()

        java:
            if (a >= 0) {
                t();
                x();
            }

        c++:
            if (a >= 0) {
                t();
                x();
            }


    case: NestedOnlyIfCompound
        python:
            if a > 0:
                if k:
                    print("a")
                    print("b")

        java:
            if (a > 0) {
                if (k) {
                    System.out.println("a");
                    System.out.println("b");
                }
            }

        c++:
            if (a > 0) {
                if (k) {
                    print("a");
                    print("b");
                }
            }


    case: OneAlternative
        python:
            if a:
                pass
            elif b:
                pass

        c++:
            if (a) {
            }
            else if (b) {
            }

        java:
            if (a) {
            }
            else if (b) {
            }


    case: OneAlternativeWithElse
        python:
            if a:
                pass
            elif b:
                pass
            else:
                c = k * 3

        c++:
            if (a) {
            }
            else if (b) {
            }
            else {
                c = k * 3;
            }

        java:
            if (a) {
            }
            else if (b) {
            }
            else {
                c = k * 3;
            }


    case: TwoAlternativesWithElseCompound
        python:
            if a:
                b = a * 3
                x += 1
            elif b:
                b = m * 3
                x += 1
            elif c:
                k = l * 3
                x += 1
            else:
                d *= 5
                x += 1

        c++:
            if (a) {
                b = a * 3;
                x++;
            }
            else if (b) {
                b = m * 3;
                x++;
            }
            else if (c) {
                k = l * 3;
                x++;
            }
            else {
                d *= 5;
                x++;
            }

        java:
            if (a) {
                b = a * 3;
                x++;
            }
            else if (b) {
                b = m * 3;
                x++;
            }
            else if (c) {
                k = l * 3;
                x++;
            }
            else {
                d *= 5;
                x++;
            }


    case: NestedAlternativesCompound
        python:
            if a > b:
                z += 1
                if x and y:
                    if x == 7:
                        x += 1
                    c += 1
                c += 1
            elif a < b:
                x += 1
                if x > 5:
                    if x != 7:
                        print("alarm")
                    else:
                        k += 1
                    c += 1
                y -= 1

        java:
            if (a > b) {
                z++;
                if (x && y) {
                    if (x == 7) {
                        x++;
                    }
                    c++;
                }
                c++;
            }
            else if (a < b) {
                x++;
                if (x > 5) {
                    if (x != 7) {
                        System.out.println("alarm");
                    }
                    else {
                        k++;
                    }
                    c++;
                }
                y--;
            }

        c++:
            if (a > b) {
                z += 1;
                if (x && y) {
                    if (x == 7) {
                        x += 1;
                    }
                    c += 1;
                }
                c += 1;
            }
            else if (a < b) {
                x += 1;
                if (x > 5) {
                    if (x != 7) {
                        print("alarm");
                    } else {
                        k += 1;
                    }
                    c += 1;
                }
                y -= 1;
            }


group: ForLoop
    case: RangeForLoop
        python:
            for i in range(0, 10, c):
                func(a)

        java:
            for (int i = 0; i < 10; i += c) {
                func(a);
            }

        c++:
            for (int i = 0; i < 10; i += c) {
                func(a);
            }


    case: RangeForLoopWithExpressions
        python:
            for v in range(a * b * c, dx - 1, 1):
                func(a)

        java:
            for (double v = a * b * c; v < dx - 1; v++) {
                func(a);
            }

        c++:
            for (double v = a * b * c; v < dx - 1; v++) {
                func(a);
            }


    case: ForEachLoop
        python:
            for a in b:
                x += 4

        java:
            for (var a : b) {
                x += 4;
            }

        c++:
            for (auto a : b) {
                x += 4;
            }


    case: GeneralForTransformationTest
        java:
            for (int a = x; a != m; m = g()) {
                func(a, b);
            }

        python:
            a: int = x
            while a != m:
                func(a, b)
                m = g()
            del a


    case: GeneralForWithMissingCondition
        java:
            for (int a = x; ; m = g()) {
                func(a, b);
            }

        python:
            a: int = x
            while True:
                func(a, b)
                m = g()
            del a


    case: GeneralForWithMissingUpdate
        java:
            for (int a = x; a != m;) {
                func(a, b);
            }

        python:
            a: int = x
            while a != m:
                func(a, b)
            del a


    case: GeneralForWithMissingUpdateWithContinue
        java:
            for (int a = x; a != m;) {
                func(a, b);
                if (a == k) {
                    continue;
                }
            }

        python:
            a: int = x
            while a != m:
                func(a, b)
                if a == k:
                    continue
            del a


    case: GeneralForEmptyLoop
        java:
            for (;;) {
            }

        python:
            while True:
                pass


    case: GeneralForWithContinueTransformationTest
        java:
            for (int a = x; a != m; m = g()) {
                func(a, b);
                if (a == m + 1) {
                    x++;
                    continue;
                }
            }

        python:
            a = x
            while a != m:
                func(a, b)
                if a == m + 1:
                    x += 1
                    m = g()
                    continue
                m = g()
            del a


group: WhileLoop
    case: SimpleWhileLoop
        python:
            while x != m:
                g()
                f()

        python:
            while x != m:
                g()
                f()

        java:
            while (x != m) {
                g();
                f();
            }

        c++:
            while (x != m) {
                g();
                f();
            }


    case: WhileLoopWithBreak
        python:
            while started():
                do_work()
                if has_errors():
                    break

        java:
            while (started()) {
                do_work();
                if (has_errors()) {
                    break;
                }
            }

        c++:
            while (started()) {
                do_work();
                if (has_errors()) {
                    break;
                }
            }


    case: WhileLoopWithEmptyBody
        python:
            while True:
                pass

        java:
            while (true) {

            }

        c++:
            while (true) {

            }


    case: DoWhileLoopTransformation
        java:
            do {
                a += 1;
            } while (a != m);

        python:
            while True:
                a += 1
                if a == m:
                    break


    case: DoWhileLoopTransformationWithComplexExpression
        java:
            do {
                a += 1;
            } while (!has_errors() && a < 35 && flag);

        python:
            while True:
                a += 1
                if not (not has_errors() and a < 35 and flag):
                    break


    case: EmptyDoWhileLoopTransformation
        java:
            do {} while (true);

        python:
            while True:
                if not True:
                    break


group: SwitchStatement
    case: SimpleMatch
        python:
            match a:
                case t:
                    test += 1
                case a:
                    test += 3
                case k:
                    test += 4
                case m:
                    test += 5
                case _:
                    test = 0

        java:
            switch (a) {
                case t:
                    test += 1;
                    break;
                case a:
                    test += 3;
                    break;
                case k:
                    test += 4;
                    break;
                case m:
                    test += 5;
                    break;
                default:
                    test = 0;
                    break;
            }

        c++:
            switch (a) {
                case t:
                    test += 1;
                    break;
                case a:
                    test += 3;
                    break;
                case k:
                    test += 4;
                    break;
                case m:
                    test += 5
                    break;
                default:
                    test = 0;
                    break;
            }


    case: MatchWithAsExpression
        python:
            match a:
                case t:
                    test += 1
                case 345 as a:
                    test += a
                case _:
                    test = 0

        java:
            switch (a) {
                case t:
                    test += 1;
                    break;
                case 345:
                    int a = 345;
                    test += a;
                    break;
                case _:
                    test = 0;
                    break;
            }

        c++:
            switch (a) {
                case t:
                    test += 1;
                    break;
                case 345:
                    int a = 345;
                    test += a;
                    break;
                case _:
                    test = 0;
                    break;
            }


group: Functions
    case: SimplePythonFunction
        python:
            def f(a, b):
                return a + b

        java:
            Object f(Object a, Object b) {
                return a + b
            }

        c++:
            auto f(auto a, auto b) {
                return a + b;
            }


    case: FullInformationPythonFunction
        python:
            def concat(a: str, b: str) -> str:
                return a + b

        java:
            String concat(String a, String b) {
                return a + b;
            }

        c++:
            std::string concat(std::string a, std::string b) {
                return a + b;
            }


    case: DecoratedFunction
        python:
            @decorator
            @next_decorator
            def concat(a: str, b: str) -> str:
                return a + b

        java:
            @decorator
            @next_decorator
            String concat(String a, String b) {
                return a + b;
            }

        c++:
            std::string concat(std::string a, std::string b) {
                return a + b;
            }


    case: FunctionWithCustomTypes
        python:
            def join_data(a: Data, b: Data) -> DataUnion:
                return a + b

        java:
            DataUnion concat(Data a, Data b) {
                return a + b;
            }

        c++:
            DataUnion concat(Data a, Data b) {
                return a + b;
            }


group: StructuresOOP
    case: ClassDefinitionWithOnlyFields
        python:
            class A:
                a: int = k
                b = GLOBAL()
                _c = 123

        c++:
            class A {
                public:
                    int a = k;
                    auto b = GLOBAL();
            }

        java:
            class A {
                public int a = k;
                public var b = GLOBAL();
            }


    case: ClassDefinitionWithOnlyMethods
        python:
            class A:
                def a(self):
                    return k()

                def b(self):
                    return r + m

        java:
            class A {
                public Object a() {
                    return k();
                }

                public Object b() {
                    return r + m;
                }
            }

        c++:
            class A {
                public:
                    Object a() {
                        return k();
                    }

                    Object b() {
                        return r + m;
                    }
            }


    case: ClassDefinition
        python:
            class A:
                k: int = 32
                m = 34

                def a(self):
                    return k()

                def b(self):
                    return r + m

        java:
            class A {
                public int k = 32;
                public Object m = 34;

                public Object a() {
                    return k();
                }

                public Object b() {
                    return r + m;
                }
            }

        c++:
            class A {
                public:
                    int k = 32;
                    Object m = 34;

                    Object a() {
                        return k();
                    }

                    Object b() {
                        return r + m;
                    }
            }


    case: StaticMethodDetection
        python:
            class A:
                @staticmethod
                def join_data(a: Data, b: Data) -> DataUnion:
                    return a + b

        java:
            class A {
                static DataUnion concat(Data a, Data b) {
                    return a + b;
                }
            }

        c++:
            class A {
                static DataUnion concat(Data a, Data b) {
                    return a + b;
                }
            }

    case: MethodSelfReferenceDetection
        python:
            class A:
                def name(self, k):
                    x = self.method().plus
                    self.method()
                    this.k
                    return x.a + self.m

        java:
            class A {
                Object name(Object k) {
                    Object x = this.method().plus;
                    this.method();
                    this.k;
                    return x.a + this.m;
                }
            }
         # TODO: –¥–æ–±–∞–≤–∏—Ç—å C++


    case: ConstructorDetection
        python:
            class A:
                def __init__(self):
                    print("construct")

        java:
            class A {
                A() {
                    print("construct");
                }
            }

        c++:
            class A {
            public:
                A() {
                    print("construct");
                }
            }


    case: DestructorDetection
        python:
            class A:
                def __del__(self):
                    print("destruct")

        java:
            class A {
                public void finalize() {
                    print("destruct");
                }
            }

        c++:
            class A {
            public:
                ~A() {
                    print("destruct");
                }
            }

    case: SuperAndThisClassConstructorCall
        java:
            class A extends B {
                A(int a, String b, float c) {
                    super(a, b);
                    this(a);
                }
            }

        python:
            class A(B):
                def __init__(self, a: int, b: str, c: float):
                    super().__init__(a, b)
                    self.__init__(a)

        c++:
            class A : public B {
            public:
                A(int a, string b, float c) : B(a, b), A(a) {

                }
            }

    case: InstanceFieldDeclaration
        python:
            class A:
                out: int = 567

                def __init__(self):
                    self.out = 5
                    self.k : int = 5
                    self.m = hello()

        java:
            class A {
                public int out = 567;
                public int k;
                public Object m;

                A() {
                    out = 5;
                    k = 5;
                    m = hello();
                }
            }

        java:
            class A {
                public:
                int out = 567;
                int k;
                object m;

                A() {
                    out = 5;
                    k = 5;
                    m = hello();
                }
            }
    # TODO: —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

group: Other
    case: Import
        python:
            import a.b.c

        java:
            import a.b.c;

        c++:
            #include "a.b.c"


    case: ImportFrom
        python:
            from a.b import c

        java:
            import a.b.c;

        c++:
            #include "a.b.c"


    case: ImportFromAs
        python:
            from a.b import c as t

        java:
            import a.b.c;

        c++:
            #include "a.b.c"

    case: MultilineComment
        python:
            """
            abc\t
            def
            """

        c++:
            /*
            abc\t
            def
            */

        java:
            /*
            abc\t
            def
            */


    case: CastTypePrimitive
        java:
            (int) a;
        c++:
            (int) a;
        isolated python:
            int(a)


    case: CastTypeCustom
        java:
            (MyClass) a;
        c++:
            (int) a;
        isolated python:
            MyClass(a)


    case: ListUnpacking
        java:
            class A {
                int a(T t, int ... args) {
                    return t + sum(args);
                }
            }

        python:
            class A:
                def a(t: T, *args: int) -> int:
                    return t + sum(args)


    case: SinglelineComment
        python:
            # abc

        c++:
            // abc

        java:
            // abc


    case: ListComprehensionWithoutIf
        python:
            for x in range(m):
                if x > func([next(k) for _ in range(t)]):
                    print("Good")

        java:
            for (int x = 0; x < m; i++) {
                ArrayList<Object> _tmp_compreh = new ArrayList<Object>();
                for (int _ = 0; _ < t; _++) {
                    _tmp_compreh.add(next(k));
                }
                if (x > func(_tmp_compreh)) {
                    print("Good");
                }
            }

        c++:
            for (int x = 0; x < m; i++) {
                list<object> _tmp_compreh;
                for (int _ = 0; _ < t; _++) {
                    _tmp_compreh.push_back(next(k));
                }
                if (x > func(_tmp_compreh)) {
                    print("Good");
                }
            }

        #TODO: –Ω–µ–π–º–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –Ω—É–∂–µ–Ω –∞–ª–≥–æ—Ä–∏—Ç–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–≥–æ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è


    case: ListComprehension
        python:
            for x in range(m):
                if x > func([next(k) for _ in range(t) if x > 5]):
                    print("Good")

        java:
            for (int x = 0; x < m; i++) {
                ArrayList<Object> _tmp_compreh = new ArrayList<Object>();
                for (int _ = 0; _ < t; _++) {
                    if (x > 5) {
                        _tmp_compreh.add(next(k));
                    }
                }
                if (x > func(_tmp_compreh)) {
                    print("Good");
                }
            }

        c++:
            for (int x = 0; x < m; i++) {
                list<object> _tmp_compreh;
                for (int _ = 0; _ < t; _++) {
                    if (x > 5) {
                        _tmp_compreh.push_back(next(k));
                    }
                }
                if (x > func(_tmp_compreh)) {
                    print("Good");
                }
            }


    case: ArrayNewSingleDimensionWithInit
        java:
            int[] args = new int[] {1, 2, 3, 4, 5};
        python:
            args: list[int] = [1, 2, 3, 4, 5]
        c++:
            int args[] = {1, 2, 3, 4, 5};


    case: ArrayNewMultiDimensionWithInit
        java:
            int[][] args = new int[][] {{1, 2}, {3, 4}, {5, 6}};
        python:
            args: list[list[int]] = [[1, 2], [3, 4], [5, 6]]
        c++:
            int args[][] = {{1, 2}, {3, 4}, {5, 6}};


    case: ArrayNewSingleDimensionWithoutInit
        java:
            int[] args = new int[35 + x.y()];
        python:
            args: list[int] = [int() for _ in range(35 + x.y())]
        c++:
            int args[35 + x.y()];


    case: ArrayNewMultiDimensionWithoutInit
        java:
            int[] args = new int[a][b];
        python:
            args: list[int] = [[int() for __ in range(b)] for _ in range(a)]
        c++:
            int args[a][b];


    case: ParenthesizedExpression
        python:
            (a + b * c) + 6 * (a := 3)

        c++:
            (a + b * c) + 6 * (a = 3);

        java:
            (a + b * c) + 6 * (a = 3);


    case: EntryPointConflictingWithC++
        python:
            a = 3
            f()

            def main():
                return 0

            if __name == "__main__":
                main()

        c++:
            int a = 3;
            f();

            int main() {
                return 0;
            }

            int main() {
                main();
                return 0;
            }

        java:
            class Main {
                public static int a = 3;

                public static int main() {
                    return 0;
                }

                public static void main(String[] args) {
                    f();
                    main();
                }
            }


    case: StandardEntryPoint
        python:
            from funcs import func
            a: int = 1

            def run():
                func(a)
                return 0

            if __name == "__main__":
                main()

        c++:
            #include "funcs.func"
            int a = 1;

            int run() {
                func(a);
                return 0;
            }

            int main() {
                run();
                return 0;
            }

        java:
            class Main {
                public static int a = 1;

                public static int run() {
                    func(a);
                    return 0;
                }

                public static void main(String[] args) {
                    run();
                    main();
                }
        }
